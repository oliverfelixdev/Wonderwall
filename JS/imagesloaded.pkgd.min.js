!function(root, factory) {
    if ("function" == typeof define && define.amd) {
      define("ev-emitter/ev-emitter", factory);
    } else {
      if ("object" == typeof module && module.exports) {
        module.exports = factory();
      } else {
        root.EvEmitter = factory();
      }
    }
   }("undefined" != typeof window ? window : this, function() {
    function ctor() {
    }
    var proto = ctor.prototype;
    return proto.on = function(type, listener) {
      if (type && listener) {
        var events = this._events = this._events || {};
        var xs = events[type] = events[type] || [];
        return-1 == xs.indexOf(listener) && xs.push(listener), this;
      }
    }, proto.once = function(name, fn) {
      if (name && fn) {
        this.on(name, fn);
        var old = this._onceEvents = this._onceEvents || {};
        var o = old[name] = old[name] || {};
        return o[fn] = true, this;
      }
    }, proto.off = function(type, fn) {
      var events = this._events && this._events[type];
      if (events && events.length) {
        var index = events.indexOf(fn);
        return-1 != index && events.splice(index, 1), this;
      }
    }, proto.emitEvent = function(type, args) {
      var events = this._events && this._events[type];
      if (events && events.length) {
        var index = 0;
        var fn = events[index];
        args = args || [];
        var cb = this._onceEvents && this._onceEvents[type];
        for (;fn;) {
          var forward = cb && cb[fn];
          if (forward) {
            this.off(type, fn);
            delete cb[fn];
          }
          fn.apply(this, args);
          index += forward ? 0 : 1;
          fn = events[index];
        }
        return this;
      }
    }, ctor;
   }), function(root, factory) {
    if ("function" == typeof define && define.amd) {
      define(["ev-emitter/ev-emitter"], function(Type) {
        return factory(root, Type);
      });
    } else {
      if ("object" == typeof module && module.exports) {
        module.exports = factory(root, require("ev-emitter"));
      } else {
        root.imagesLoaded = factory(root, root.EvEmitter);
      }
    }
   }(window, function(root, Type) {
    function extend(a, b) {
      var prop;
      for (prop in b) {
        a[prop] = b[prop];
      }
      return a;
    }
    function makeArray(obj) {
      var ary = [];
      if (Array.isArray(obj)) {
        ary = obj;
      } else {
        if ("number" == typeof obj.length) {
          var i = 0;
          for (;i < obj.length;i++) {
            ary.push(obj[i]);
          }
        } else {
          ary.push(obj);
        }
      }
      return ary;
    }
    function ImagesLoaded(elem, options, onAlways) {
      return this instanceof ImagesLoaded ? ("string" == typeof elem && (elem = document.querySelectorAll(elem)), this.elements = makeArray(elem), this.options = extend({}, this.options), "function" == typeof options ? onAlways = options : extend(this.options, options), onAlways && this.on("always", onAlways), this.getImages(), $ && (this.jqDeferred = new $.Deferred), void setTimeout(function() {
        this.check();
      }.bind(this))) : new ImagesLoaded(elem, options, onAlways);
    }
    function LoadingImage(img) {
      this.img = img;
    }
    function Sprite(url, element) {
      this.url = url;
      this.element = element;
      this.img = new Image;
    }
    var $ = root.jQuery;
    var console = root.console;
    ImagesLoaded.prototype = Object.create(Type.prototype);
    ImagesLoaded.prototype.options = {};
    ImagesLoaded.prototype.getImages = function() {
      this.images = [];
      this.elements.forEach(this.addElementImages, this);
    };
    ImagesLoaded.prototype.addElementImages = function(el) {
      if ("IMG" == el.nodeName) {
        this.addImage(el);
      }
      if (this.options.background === true) {
        this.addElementBackgroundImages(el);
      }
      var ontype = el.nodeType;
      if (ontype && cur[ontype]) {
        var resultItems = el.querySelectorAll("img");
        var i = 0;
        for (;i < resultItems.length;i++) {
          var result = resultItems[i];
          this.addImage(result);
        }
        if ("string" == typeof this.options.background) {
          var codeSegments = el.querySelectorAll(this.options.background);
          i = 0;
          for (;i < codeSegments.length;i++) {
            var suiteView = codeSegments[i];
            this.addElementBackgroundImages(suiteView);
          }
        }
      }
    };
    var cur = {
      1 : true,
      9 : true,
      11 : true
    };
    return ImagesLoaded.prototype.addElementBackgroundImages = function(obj) {
      var s = getComputedStyle(obj);
      if (s) {
        var re = /url\((['"])?(.*?)\1\)/gi;
        var b = re.exec(s.backgroundImage);
        for (;null !== b;) {
          var bup = b && b[2];
          if (bup) {
            this.addBackground(bup, obj);
          }
          b = re.exec(s.backgroundImage);
        }
      }
    }, ImagesLoaded.prototype.addImage = function(img) {
      var loadingImage = new LoadingImage(img);
      this.images.push(loadingImage);
    }, ImagesLoaded.prototype.addBackground = function(a, name) {
      var s = new Sprite(a, name);
      this.images.push(s);
    }, ImagesLoaded.prototype.check = function() {
      function next(image, total, elem) {
        setTimeout(function() {
          _this.progress(image, total, elem);
        });
      }
      var _this = this;
      return this.progressedCount = 0, this.hasAnyBroken = false, this.images.length ? void this.images.forEach(function(_this) {
        _this.once("progress", next);
        _this.check();
      }) : void this.complete();
    }, ImagesLoaded.prototype.progress = function(image, total, e) {
      this.progressedCount++;
      this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;
      this.emitEvent("progress", [this, image, total]);
      if (this.jqDeferred) {
        if (this.jqDeferred.notify) {
          this.jqDeferred.notify(this, image);
        }
      }
      if (this.progressedCount == this.images.length) {
        this.complete();
      }
      if (this.options.debug) {
        if (console) {
          console.log("progress: " + e, image, total);
        }
      }
    }, ImagesLoaded.prototype.complete = function() {
      var eventName = this.hasAnyBroken ? "fail" : "done";
      if (this.isComplete = true, this.emitEvent(eventName, [this]), this.emitEvent("always", [this]), this.jqDeferred) {
        var jqMethod = this.hasAnyBroken ? "reject" : "resolve";
        this.jqDeferred[jqMethod](this);
      }
    }, LoadingImage.prototype = Object.create(Type.prototype), LoadingImage.prototype.check = function() {
      var getIsImageComplete = this.getIsImageComplete();
      return getIsImageComplete ? void this.confirm(0 !== this.img.naturalWidth, "naturalWidth") : (this.proxyImage = new Image, this.proxyImage.addEventListener("load", this), this.proxyImage.addEventListener("error", this), this.img.addEventListener("load", this), this.img.addEventListener("error", this), void(this.proxyImage.src = this.img.src));
    }, LoadingImage.prototype.getIsImageComplete = function() {
      return this.img.complete && void 0 !== this.img.naturalWidth;
    }, LoadingImage.prototype.confirm = function(isLoaded, message) {
      this.isLoaded = isLoaded;
      this.emitEvent("progress", [this, this.img, message]);
    }, LoadingImage.prototype.handleEvent = function(event) {
      var method = "on" + event.type;
      if (this[method]) {
        this[method](event);
      }
    }, LoadingImage.prototype.onload = function() {
      this.confirm(true, "onload");
      this.unbindEvents();
    }, LoadingImage.prototype.onerror = function() {
      this.confirm(false, "onerror");
      this.unbindEvents();
    }, LoadingImage.prototype.unbindEvents = function() {
      this.proxyImage.removeEventListener("load", this);
      this.proxyImage.removeEventListener("error", this);
      this.img.removeEventListener("load", this);
      this.img.removeEventListener("error", this);
    }, Sprite.prototype = Object.create(LoadingImage.prototype), Sprite.prototype.check = function() {
      this.img.addEventListener("load", this);
      this.img.addEventListener("error", this);
      this.img.src = this.url;
      var getIsImageComplete = this.getIsImageComplete();
      if (getIsImageComplete) {
        this.confirm(0 !== this.img.naturalWidth, "naturalWidth");
        this.unbindEvents();
      }
    }, Sprite.prototype.unbindEvents = function() {
      this.img.removeEventListener("load", this);
      this.img.removeEventListener("error", this);
    }, Sprite.prototype.confirm = function(isLoaded, message) {
      this.isLoaded = isLoaded;
      this.emitEvent("progress", [this, this.element, message]);
    }, ImagesLoaded.makeJQueryPlugin = function(jQuery) {
      jQuery = jQuery || root.jQuery;
      if (jQuery) {
        $ = jQuery;
        $.fn.imagesLoaded = function(options, callback) {
          var instance = new ImagesLoaded(this, options, callback);
          return instance.jqDeferred.promise($(this));
        };
      }
    }, ImagesLoaded.makeJQueryPlugin(), ImagesLoaded;
   });